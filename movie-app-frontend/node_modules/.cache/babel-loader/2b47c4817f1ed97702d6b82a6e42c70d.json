{"ast":null,"code":"import { Component } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { retrieveUserToken } from './redux/UserActions';\nimport jwtdecode from 'jwt-decode';\nimport { retrieveAdminToken } from './redux/AdminActions'; // const ProtectComponent = ({role, children}) => {\n//     const user = useSelector( state => state.user )\n//     const admin = useSelector( state => state.admin )\n//     if(user._userId && user.userRole === role)\n//     return children\n//     if(admin._adminId && admin.adminRole === role)\n//     return children\n//     if(role === 'admin')\n//     return <Navigate to='/admin' replace/>\n//     else if(role === 'user')\n//     return <Navigate to='/home' replace/>\n// }\n\nclass ProtectComponent extends Component {\n  // user = useSelector( state => state.user )\n  // admin = useSelector( state => state.admin )\n  // constructor(props){\n  //     super(props)\n  // }\n  componentWillMount() {\n    console.log(\"will mount\"); // this.props.dispatch(retrieveUserToken())\n\n    this.props.dispatch(retrieveAdminToken());\n  }\n\n  render() {//     const user = this.props.user\n    //     const role = this.props.role\n    //     const decode = jwtdecode(user.userToken)\n    //    console.log(\"admin state : \",this.props.admin)\n    // if(decode.id && decode.role === role)\n    // return this.props.children\n    // if(admin._adminId && admin.adminRole === role)\n    // return this.props.children\n    // if(role === 'admin')\n    // return <Navigate to='/admin' replace/>\n    // else if(role === 'user')\n    // {\n    //     console.log(\"re render to auth user\")\n    //     return <Navigate to='/auth' replace/>}\n    // }\n  } // const mapUserStateToProps = state => {\n  //     return {\n  //         user : state.user\n  //     }\n  // }\n\n\n}\n\nconst mapAdminStateToProps = state => {\n  return {\n    admin: state.admin\n  };\n};\n\nexport default connect(mapAdminStateToProps)(ProtectComponent);","map":{"version":3,"names":["Component","useSelector","Navigate","connect","retrieveUserToken","jwtdecode","retrieveAdminToken","ProtectComponent","componentWillMount","console","log","props","dispatch","render","mapAdminStateToProps","state","admin"],"sources":["/home/asplap2005/Documents/React-Project/movie-app-frontend/src/components/ProtectComponent.js"],"sourcesContent":["import { Component } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { retrieveUserToken } from './redux/UserActions'\nimport jwtdecode from 'jwt-decode'\nimport { retrieveAdminToken } from './redux/AdminActions'\n\n// const ProtectComponent = ({role, children}) => {\n//     const user = useSelector( state => state.user )\n//     const admin = useSelector( state => state.admin )\n    \n//     if(user._userId && user.userRole === role)\n//     return children\n\n//     if(admin._adminId && admin.adminRole === role)\n//     return children\n\n//     if(role === 'admin')\n//     return <Navigate to='/admin' replace/>\n    \n//     else if(role === 'user')\n//     return <Navigate to='/home' replace/>\n    \n    \n// }\nclass ProtectComponent extends Component{\n    // user = useSelector( state => state.user )\n    // admin = useSelector( state => state.admin )\n    // constructor(props){\n    //     super(props)\n    // }\n    componentWillMount(){\n        console.log(\"will mount\")\n        // this.props.dispatch(retrieveUserToken())\n        this.props.dispatch(retrieveAdminToken())\n    }\n    render(){\n    //     const user = this.props.user\n    //     const role = this.props.role\n    //     const decode = jwtdecode(user.userToken)\n    //    console.log(\"admin state : \",this.props.admin)\n    // if(decode.id && decode.role === role)\n    // return this.props.children\n\n    // if(admin._adminId && admin.adminRole === role)\n    // return this.props.children\n\n    // if(role === 'admin')\n    // return <Navigate to='/admin' replace/>\n    \n    // else if(role === 'user')\n    // {\n    //     console.log(\"re render to auth user\")\n    //     return <Navigate to='/auth' replace/>}\n    // }\n}\n\n// const mapUserStateToProps = state => {\n//     return {\n//         user : state.user\n//     }\n// }\n}\nconst mapAdminStateToProps = state => {\n    return {\n        admin : state.admin\n    }\n}\n\n\nexport default connect( mapAdminStateToProps)(ProtectComponent)"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,kBAAT,QAAmC,sBAAnC,C,CAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;;AACA,MAAMC,gBAAN,SAA+BP,SAA/B,CAAwC;EACpC;EACA;EACA;EACA;EACA;EACAQ,kBAAkB,GAAE;IAChBC,OAAO,CAACC,GAAR,CAAY,YAAZ,EADgB,CAEhB;;IACA,KAAKC,KAAL,CAAWC,QAAX,CAAoBN,kBAAkB,EAAtC;EACH;;EACDO,MAAM,GAAE,CACR;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IACA;EACH,CA9BuC,CAgCxC;EACA;EACA;EACA;EACA;;;AApCwC;;AAsCxC,MAAMC,oBAAoB,GAAGC,KAAK,IAAI;EAClC,OAAO;IACHC,KAAK,EAAGD,KAAK,CAACC;EADX,CAAP;AAGH,CAJD;;AAOA,eAAeb,OAAO,CAAEW,oBAAF,CAAP,CAA+BP,gBAA/B,CAAf"},"metadata":{},"sourceType":"module"}