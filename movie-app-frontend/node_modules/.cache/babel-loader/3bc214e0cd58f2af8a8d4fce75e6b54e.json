{"ast":null,"code":"import { SET_MOVIES, SET_MOVIE, SET_UPDATED_MOVIE, SET_ADDED_MOVIE, SET_MOVIE_ERROR, CLEAR_MOVIE_ERROR, SET_DELETE_MOVIE } from \"./ActionTypes\";\nimport axios from 'axios';\nimport { MovieBase } from \"../api/BaseUrl\";\nimport { axiosAdminInstance } from \"../api/Interceptors\";\n\nconst setMovies = movies => {\n  return {\n    type: SET_MOVIES,\n    payload: movies\n  };\n};\n\nconst setUpdatedMovie = movie => {\n  return {\n    type: SET_UPDATED_MOVIE,\n    payload: movie\n  };\n};\n\nconst setMovie = movie => {\n  return {\n    type: SET_MOVIE,\n    payload: movie\n  };\n};\n\nconst setAddedMovie = success => {\n  return {\n    type: SET_ADDED_MOVIE,\n    payload: success\n  };\n};\n\nconst setMovieError = error => {\n  return {\n    type: SET_MOVIE_ERROR,\n    payload: error\n  };\n};\n\nconst clearMovieError = () => {\n  return {\n    type: CLEAR_MOVIE_ERROR\n  };\n};\n\nconst setDeleteMovie = message => {\n  return {\n    type: SET_DELETE_MOVIE,\n    payload: message\n  };\n};\n\nconst setCurrentMovies = movies => {\n  return {\n    type: 'SET_CURRENT_MOVIES',\n    payload: movies\n  };\n};\n\nconst viewMovies = () => {\n  return dispatch => {\n    axios.get(`${MovieBase}`).then(movies => {\n      dispatch(setMovies(movies.data.movies));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst viewCurrentMovies = currentDate => {\n  return dispatch => {\n    axios.get(`${MovieBase}/today/?current=${currentDate}`).then(movies => {\n      console.log(\"cuurrent date : \", cuu);\n      console.log(\"Current Movies : \", movies.data);\n    }).catch(err => {\n      console.log(\"error : \", err);\n    });\n  };\n};\n\nconst addMovies = movieDetails => {\n  return dispatch => {\n    axiosAdminInstance({\n      url: `movies`,\n      method: \"post\",\n      data: movieDetails\n    }).then(movie => {\n      dispatch(setAddedMovie(movie.data.message));\n    }).catch(error => {\n      if (error.response.status === 400) {\n        if (error.response.data[0] && error.response.data[0].startBookingDate !== '') dispatch(setMovieError(error.response.data[0].startBookingDate));else if (error.response.data[0] && error.response.data[0].endBookingDate !== '') dispatch(setMovieError(error.response.data[0].endBookingDate));else dispatch(setMovieError(error.response.data.errorMessage));\n      }\n    });\n  };\n};\n\nconst viewMovie = movieId => {\n  return dispatch => {\n    axios.get(`${MovieBase}/${movieId}`).then(movie => {\n      dispatch(setMovie(movie.data.movie));\n    }).catch(err => console.log(err));\n  };\n};\n\nconst deleteMovie = movieId => {\n  return dispatch => {\n    axiosAdminInstance({\n      url: `movies/${movieId}`,\n      method: \"delete\"\n    }).then(movie => {\n      dispatch(setDeleteMovie(movie.data.message));\n    }).catch(error => {\n      if (error.response.status === 400) dispatch(setMovieError(error.response.data.errorMessage));\n    });\n  };\n};\n\nconst updateMovie = (movieDetails, movieId) => {\n  return dispatch => {\n    axiosAdminInstance({\n      url: `movies/${movieId}`,\n      method: \"put\",\n      data: movieDetails\n    }).then(() => {\n      dispatch(setUpdatedMovie(movieDetails));\n    }).catch(err => console.log(err));\n  };\n};\n\nexport { addMovies, viewMovies, viewMovie, viewCurrentMovies, deleteMovie, updateMovie, clearMovieError };","map":{"version":3,"names":["SET_MOVIES","SET_MOVIE","SET_UPDATED_MOVIE","SET_ADDED_MOVIE","SET_MOVIE_ERROR","CLEAR_MOVIE_ERROR","SET_DELETE_MOVIE","axios","MovieBase","axiosAdminInstance","setMovies","movies","type","payload","setUpdatedMovie","movie","setMovie","setAddedMovie","success","setMovieError","error","clearMovieError","setDeleteMovie","message","setCurrentMovies","viewMovies","dispatch","get","then","data","catch","err","console","log","viewCurrentMovies","currentDate","cuu","addMovies","movieDetails","url","method","response","status","startBookingDate","endBookingDate","errorMessage","viewMovie","movieId","deleteMovie","updateMovie"],"sources":["/home/asplap2005/Documents/React-Project/movie-app-frontend/src/components/redux/MovieActions.js"],"sourcesContent":["import { SET_MOVIES, SET_MOVIE, SET_UPDATED_MOVIE, SET_ADDED_MOVIE, SET_MOVIE_ERROR, CLEAR_MOVIE_ERROR, SET_DELETE_MOVIE } from \"./ActionTypes\"\nimport axios from 'axios'\nimport { MovieBase } from \"../api/BaseUrl\"\nimport { axiosAdminInstance } from \"../api/Interceptors\"\n\nconst setMovies = (movies) => {\n    return {\n        type : SET_MOVIES,\n        payload : movies\n    }\n}\nconst setUpdatedMovie = (movie) => {\n    return {\n        type : SET_UPDATED_MOVIE,\n        payload : movie\n    }\n}\nconst setMovie = (movie) => {\n    return {\n        type : SET_MOVIE,\n        payload : movie\n    }\n}\nconst setAddedMovie = (success) => {\n    return {\n        type : SET_ADDED_MOVIE,\n        payload : success\n    }\n}\nconst setMovieError = (error) => {\n    return {\n        type : SET_MOVIE_ERROR,\n        payload : error\n    }\n}\nconst clearMovieError = () => {\n    return {\n        type : CLEAR_MOVIE_ERROR\n    }\n}\nconst setDeleteMovie = (message) => {\n    return {\n        type : SET_DELETE_MOVIE,\n        payload : message\n    }\n}\nconst setCurrentMovies = (movies) => {\n    return {\n        type : 'SET_CURRENT_MOVIES',\n        payload : movies\n    }\n}\nconst viewMovies = () => {\n    return(dispatch) => {\n        axios.get(`${MovieBase}`)\n        .then(movies => {\n            dispatch(setMovies(movies.data.movies))\n        })\n        .catch( err => console.log(err) )\n    }\n}\nconst viewCurrentMovies = (currentDate) => {\n    return(dispatch) => {\n        axios.get(`${MovieBase}/today/?current=${currentDate}`)\n        .then(movies => {\n            console.log(\"cuurrent date : \",cuu)\n            console.log(\"Current Movies : \",movies.data)\n        })\n        .catch( err => {\n            console.log(\"error : \",err)\n        })\n    }\n}\nconst addMovies = (movieDetails) => {\n    return (dispatch) => {\n        axiosAdminInstance({\n            url: `movies`,\n            method: \"post\",\n            data:movieDetails\n        })\n        .then(movie => { \n            dispatch(setAddedMovie(movie.data.message))\n        })\n        .catch( error => {\n            if(error.response.status === 400)\n                {\n                    if(error.response.data[0] && error.response.data[0].startBookingDate !== '')\n                    dispatch(setMovieError(error.response.data[0].startBookingDate))\n                    else if(error.response.data[0] && error.response.data[0].endBookingDate !== '')\n                    dispatch(setMovieError(error.response.data[0].endBookingDate))\n                    else\n                    dispatch(setMovieError(error.response.data.errorMessage))\n                }\n        }\n        )\n    }\n}\nconst viewMovie = (movieId) => {\n    return(dispatch) => {\n        axios.get(`${MovieBase}/${movieId}`)\n        .then(movie => {\n            dispatch(setMovie(movie.data.movie))\n        })\n        .catch( err => console.log(err) )\n    }\n}\nconst deleteMovie = (movieId) => {\n    return(dispatch) => {\n        axiosAdminInstance({\n            url: `movies/${movieId}`,\n            method: \"delete\"\n        })\n        .then((movie) => {\n            dispatch(setDeleteMovie(movie.data.message))\n        } )\n        .catch( (error) => {\n            if(error.response.status === 400)\n            dispatch(setMovieError(error.response.data.errorMessage))\n        })\n    }\n}\nconst updateMovie = (movieDetails,movieId) => {\n    return(dispatch) => {\n        axiosAdminInstance({\n            url: `movies/${movieId}`,\n            method: \"put\",\n            data:movieDetails\n        })\n        .then(() => {\n            dispatch(setUpdatedMovie(movieDetails))\n        })\n        .catch( err => console.log(err))\n    }\n}\nexport {\n    addMovies,\n    viewMovies,\n    viewMovie,\n    viewCurrentMovies,\n    deleteMovie,\n    updateMovie,\n    clearMovieError\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}